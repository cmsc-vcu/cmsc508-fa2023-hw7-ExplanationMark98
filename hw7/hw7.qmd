---
title: Homework 7 - Creating a resume database
author: John Duffer
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This document provides an summary of the resume database



GITHUB URL:  https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-ExplanationMark98

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

Create a data base to hold a company's employees, the employee's skills and roles.

## Crows-foot diagram

This Diagram represents the relationship between People, People skills, People roles, roles and skills. I coulndt figure out how to show the roles and skills entities in the diagram. If Skills were here, it would connect to people skills with a one to many relationship. Same with roles for people roles.
```{mermaid}
%%| echo: false
erDiagram
    PEOPLE ||--o{ PEOPLEROLES : "Assigned to"
    PEOPLE ||--o{ PEOPLESKILLS : "Acquires"
    PEOPLE {
        int id
        varchar(256) last_name
        varchar(256) email
        varchar(256) linkedin_url
        varchar(256) headshot_url
        varchar(256) discord_handle
        varchar(256) brief_bio
        date date_joined
    }
    PEOPLESKILLS {
        int id
        int skills_id
        int people_id
        date date_acquired
    }
    SKILLS ||--o{ PEOPLESKILLS : "Acquired by"
    SKILLS {
        int id
        varchar(255) name
        varchar(255) description
        varchar(255) tag
        varchar(255) url
        int time_commitment
    }
    PEOPLEROLES {
        int id
        int people_id
        int role_id
        date date_assigned
    }
    ROLES ||--o{ PEOPLEROLES : "Assigned to"
    ROLES {
        int id
        varchar(255) name
        int sort_priority
    }

```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe ... 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe ... 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe ... 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT skills_name AS name, skills_tag AS tag, skills_description AS description
FROM skills
ORDER BY skills_name;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name

```{python}
#| echo: false
#| eval: true
sql = f"""
select people_last_name AS name, people_email AS email
from people
ORDER BY name
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```
### List skill names of Person 1
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT skills.skills_name AS skillName
FROM skills
JOIN peopleskills ON skills.skills_id = peopleskills.skills_id
JOIN people ON people.people_id = peopleskills.people_id
WHERE people.people_id = 1;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df


```


### List people names with Skill 6
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT people.people_last_name
FROM people
JOIN peopleskills ON people.people_id = peopleskills.people_id
JOIN skills ON skills.skills_id = peopleskills.skills_id
WHERE skills.skills_id = 6;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df


```


### List people with a DEVELOPER role
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT *
FROM people
JOIN peopleroles ON people.people_id = peopleroles.people_id
JOIN roles ON roles.id = peopleroles.role_id
WHERE roles.name = 'Developer';
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df


```


### List names and email addresses of people without skills
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT people.people_last_name, people.people_email
FROM people
LEFT JOIN peopleskills ON people.people_id = peopleskills.people_id
WHERE peopleskills.skills_id IS NULL;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df


```

### List names and tags of unused skills
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT skills_name, skills_tag
FROM skills
WHERE skills_id NOT IN (
    SELECT DISTINCT skills_id
    FROM peopleskills
);
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df


```

### List people names and skill names with the BOSS role

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT people.people_last_name, skills.skills_name
FROM people
JOIN peopleroles ON people.people_id = peopleroles.people_id
JOIN roles ON peopleroles.role_id = roles.id
LEFT JOIN peopleskills ON people.people_id = peopleskills.people_id
LEFT JOIN skills ON peopleskills.skills_id = skills.skills_id
WHERE roles.name = 'Boss';

"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df


```


### List ids and names of unused roles
```{python}
#| echo: false
#| eval: true
sql = f"""


SELECT id, name
FROM roles
WHERE id NOT IN (
    SELECT DISTINCT role_id
    FROM peopleroles
);
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df


```

## Reflection

I would argue that this assignment was difficult but rewarding. I definitely had to lean on chatgpt for some of the sql. Creating/populating the tables was fairly easy after watching the professors lecture. The hardest part was the sql queries. The amount of queries that are requested in this assignment is a perfect amount where its not overwhelming but it forced me to learn how to string together the sql commands to make accurate queries. I appreciate that about this assignment.
